Terraform is an open-source Infrastructure as Code (IaC) tool developed by HashiCorp. It allows you to define and provision infrastructure resources and services in a declarative manner. In simple terms, Terraform enables you to describe your infrastructure and its components (such as virtual machines, networks, databases, storage, and more) as code, and then it automates the process of creating and managing those resources.

Terraform is written in HCL {Hashicorp Confriguration language}.

Terraform consists of Blocks and argument.

Example -: vim local.tf

resource "local_file" "pet"{
    filename = "/root/pet.txt"
    content = "We love pets!"
}

resource    --> Block name
local_file  --> resource type
pet         --> resource name
{----}      --> Arguments

It will create a file named as /root/pet.txt with content as We love pets!

-------------------------------------------------------------------------------------------------------------------------------------------------

Commands for Terraform
1.  terraform init         -----> It will initalize the local.tf by downloading/installing local on base.
2.  terraform plan         -----> It will provide all the details and steps how the file is gonna execute.
3.  terraform apply        -----> It will run the script of file and will excute and provide result.
4.  terraform delete       -----> It will delete the local.tf and delete the executed result.
4.  terrafrom validate     -----> It will validate the syntax and confriguration of file.
5.  terraform fmt          -----> It will format and show the changes with name of file.
6.  terraform show         -----> It will show current state of resource file.
7.  terraform show -json   -----> It will show current state of resource file in JSON format.
8.  terraform providers    -----> It will showcase the list of all providers.
9.  terraform output       -----> It will show the output variables that is stored.
10. terraform refresh      -----> It will refresh/modify the current state plan.
11. terraform graph        -----> It will generate the overview of main.tf before using command in terraform inti it is in dot language.


-------------------------------------------------------------------------------------------------------------------------------------------------

File Name                                                    Purpose

main.tf                                        Main configuration file containing resource definition
variables.tf                                   Contains variable declarations
outputs.tf                                     Contains outputs from resources
provider.tf                                    contains provider definiton

-------------------------------------------------------------------------------------------------------------------------------------------------

Types of Variables   ---> variables.tf

1. String  ---> "/root/pet.txt"
2. Number  ---> 1
3. Boolean ---> True/False
4. Any     ---> Default Value
5. List    ---> ["cat", "dog"]  Set are similar to list but in set we cant have duplicate value i.e, for single list we cannot have two cat or dogs.
6. Map     ---> pet1 = cat 
                pet2 = dog
7. Object  ---> Complex data structure
8. tuple   ---> Complex data structure

-------------------------------------------------------------------------------------------------------------------------------------------------

                                                        Example of variables.tf

1. Example for list
variable "prefix" {
    defaults = ["Mr", "Mrs", "Sir"]     // hcl is correct
    type = list(string)
}

variable "prefix" {
    defaults = [1, 2, 3]                // hcl is correct
    type = list(number)
}

variable "prefix" {
    defaults = ["Mr", "Mrs", "Sir"]     // hcl is incorrect
    type = list(number)
}

variable "prefix" {
    defaults = [1, 2, 3]               // hcl is incorrect
    type = list(string)
}

2. Example for tuple 
variable kitty {
    type = tuple([string, number, bool])
    default = ["cat", 7, true]
}

3. Example for Map
variable "jedi" {
     type = map
     default = {                        ----> variable.tf
     filename = "/root/first-jedi"
     content = "phanius"
     }
}

resource "local_file" "jedi" {
     filename = var.jedi["filename"]  ----> main.tf
     content = var.jedi["content"]
}

-------------------------------------------------------------------------------------------------------------------------------------------------

In terraform, we can keep all variables content in file named as terraform.tfvars / terraform.tfvars.json / auto.tfvars.json / auto.tfvars
If we have given other name for tfvars then command will be $terraform apply -var-file variables.tfvars

example-: 
filename: "/root/pets.txt"
content: "Yoshita"

-------------------------------------------------------------------------------------------------------------------------------------------------

                                                      Types of Dependancy

1. Implicit Dependency

resource "tls_private_key" "pvtkey" {
    algorithm = "RSA"
    rsa_bits = 4096
}

resource "local_file" "key_details" {
    filename = "/root/key.txt"
    content  = tls_private_key.pvtkey.private_key_pem

}

2. Explicit Dependency

resource "local_file" "whale" {
    filename = "/root/whale"
    content = "whale"
    depends_on = [ local_file.krill ]
}

resource "local_file" "krill" {
  filename = "/root/krill"
  content = "krill"
}

-------------------------------------------------------------------------------------------------------------------------------------------------

                                                      Output Variable

 resource "random_pet" "my-pet" {
  length    = var.length 
}

output "pet-name" {
	
	value = random_pet.my-pet.id
	description = "Record the value of pet ID generated by the random_pet resource"
}

resource "local_file" "welcome" {
    filename = "/root/message.txt"
    content = "Welcome to Kodekloud."
}

output "welcome_message" {
	
	value = local_file.welcome.content
	description = "Record the value of pet ID generated by the random_pet resource"
}

# Terraform Output ❯ It helps to store data or value if output is need to be stored.
terraform output 
pet-name = "sheep"
welcome_message = "Welcome to Kodekloud."      

-------------------------------------------------------------------------------------------------------------------------------------------------

                                                       Lifecycle Rules
                                                       
  1. create_before_destory ---> Create the resource first and then destroy older.
  2. prevent_destroy       ---> Prevents destroy of a resource.
  3. ignore_changes        ---> Ignore changes to attributes (specific/all).                                                     

-------------------------------------------------------------------------------------------------------------------------------------------------
                                          
                                                       Data Source

                                               RESOURCE vs Data Source         

Resource ----> 
1. Keyword: resource
2. Work: Creates, updates, destroy infrastructure
3. Also called as Managed resource.

Data     ----> 
1. Keyword: data
2. Work: only Reads infrastructure
3. Also called as data resource.

# Example --->

output "os-version" {
  value = data.local_file.os.content
}
data "local_file" "os" {
  filename = "/etc/os-release"
}

Outputs:

os-version = <<EOT
PRETTY_NAME="Ubuntu 22.04.3 LTS"
NAME="Ubuntu"
VERSION_ID="22.04"
VERSION="22.04.3 LTS (Jammy Jellyfish)"
VERSION_CODENAME=jammy
ID=ubuntu
ID_LIKE=debian
HOME_URL="https://www.ubuntu.com/"
SUPPORT_URL="https://help.ubuntu.com/"
BUG_REPORT_URL="https://bugs.launchpad.net/ubuntu/"
PRIVACY_POLICY_URL="https://www.ubuntu.com/legal/terms-and-policies/privacy-policy"
UBUNTU_CODENAME=jammy

-------------------------------------------------------------------------------------------------------------------------------------------------

                                                      Meta Arguments
                            
1. Depends on
2. Lifecycle

3. Count
 # Length --->                        
 resource "local_file" "pet"{
    filename = var.filename[count.index]         {main.tf}
    count = length(var.filename)
 }

 variable "filename" {
    default = [
        "/root/pets.txt"                       {variables.tf}
        "/root/dogs.txt"
        "/root/cats.txt"
    ]
 }

 # for_each
 